# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJtHBUhrgV5uaAVdJcPkKgQL4H71ZAG5
"""

import os
from flask import Flask, request, redirect, url_for, render_template, send_from_directory,make_response,Response
from werkzeug.utils import secure_filename
from PyPDF2 import PdfFileReader, PdfFileWriter
import pandas as pd

UPLOAD_FOLDER = os.path.dirname(os.path.abspath(__file__)) + '/uploads/'
DOWNLOAD_FOLDER = os.path.dirname(os.path.abspath(__file__)) + '/downloads/'
ALLOWED_EXTENSIONS = {'pdf', 'txt'}

app = Flask(__name__, static_url_path="/static")
DIR_PATH = os.path.dirname(os.path.realpath(__file__))
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['DOWNLOAD_FOLDER'] = DOWNLOAD_FOLDER
# limit upload size upto 8mb
app.config['MAX_CONTENT_LENGTH'] = 8 * 1024 * 1024


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            print('No file attached in request')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            print('No file selected')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            process_file(os.path.join(app.config['UPLOAD_FOLDER'], filename), filename)
            return redirect(url_for('uploaded_file', filename=filename))
    return render_template('index.html')


def process_file(path, filename):
    remove_watermark(path, filename)
    # with open(path, 'a') as f:
    #    f.write("\nAdded processed content")


def remove_watermark(path, filename):
    industry = 'Banking'
    KPI_ind=KPI_info[KPI_info['Industry']==industry]
    KP=KPI_ind['KPI_name'].tolist()
    map_object = map(formatted,KP)
    KPIs = list(map_object)
    KPIids=KPI_ind['KPI_Id'].tolist()
    KPI_dict = {idx: el for idx, el in enumerate(KPIs)}
    id_mapper = {KP[i]: KPIids[i] for i in range(len(KP))}
    obtained=dataextraction(path,KPI_dict,industry,KP,id_mapper)[0]
    mast=dataextraction(path,KPI_dict,industry,KP,id_mapper)[1]
    melt=dataextraction(path,KPI_dict,industry,KP,id_mapper)[2]
    master=pd.concat([master, mast], axis=0, ignore_index=True) 
    mastermelt=pd.concat([mastermelt, melt], axis=0, ignore_index=True)
    df.to_csv(os.path.join(SP_dir,precisioncsv),index=False)
    master.to_csv(os.path.join(SP_dir,mastercsv),index=False)
    mastermelt.to_csv(os.path.join(SP_dir,mastermeltcsv),index=False)
    master.to_csv(app.config['DOWNLOAD_FOLDER'] + filename.replace('.pdf','.csv'),index=False) 
   
   

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['DOWNLOAD_FOLDER'],filename.replace('.pdf','.csv'), as_attachment=True)
    
    
    

if __name__ == '__main__':
    app.run(debug=True)